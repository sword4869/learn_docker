import{_ as s,V as i,W as t,Y as n,Z as l,$ as o,X as a,D as c}from"./framework-48406333.js";const r={},d=a(`<ul><li><a href="#1-container">1. container</a><ul><li><a href="#11-create-and-start">1.1. Create and Start</a><ul><li><a href="#111-%E5%9F%BA%E6%9C%AC">1.1.1. 基本</a></li><li><a href="#112-%E4%BA%A4%E4%BA%92%E5%92%8C%E5%90%8E%E5%8F%B0">1.1.2. 交互和后台</a><ul><li><a href="#1121-it%E4%BA%A4%E4%BA%92">1.1.2.1. it交互</a></li><li><a href="#1122-%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4">1.1.2.2. 启动时执行命令</a></li><li><a href="#1123-%E5%90%8E%E5%8F%B0">1.1.2.3. 后台</a><ul><li><a href="#11231-log">1.1.2.3.1. log</a></li><li><a href="#11232-%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0">1.1.2.3.2. 进入后台</a></li></ul></li></ul></li><li><a href="#113-%E5%AE%B9%E5%99%A8%E5%91%BD%E5%90%8D">1.1.3. 容器命名</a></li><li><a href="#114-%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84">1.1.4. 端口映射</a></li><li><a href="#115-%E6%8C%82%E8%BD%BDvolume">1.1.5. 挂载Volume</a></li><li><a href="#116-gpu">1.1.6. GPU</a></li></ul></li><li><a href="#12-list">1.2. List</a></li><li><a href="#13-startstoprestart">1.3. Start|Stop|Restart</a></li><li><a href="#14-operate-a-running-container">1.4. Operate a running container</a></li><li><a href="#15-remove">1.5. Remove</a><ul><li><a href="#151-automaically-remove">1.5.1. Automaically remove</a></li><li><a href="#152-manually-remove-exited">1.5.2. Manually remove exited</a></li><li><a href="#153-remove-all-exited">1.5.3. Remove all exited</a></li></ul></li></ul></li></ul><hr><h1 id="_1-container" tabindex="-1"><a class="header-anchor" href="#_1-container" aria-hidden="true">#</a> 1. container</h1><h2 id="_1-1-create-and-start" tabindex="-1"><a class="header-anchor" href="#_1-1-create-and-start" aria-hidden="true">#</a> 1.1. Create and Start</h2><h3 id="_1-1-1-基本" tabindex="-1"><a class="header-anchor" href="#_1-1-1-基本" aria-hidden="true">#</a> 1.1.1. 基本</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用指定镜像来创建一个容器</span>
<span class="token comment"># or docker container run &lt;image name&gt;</span>
$ <span class="token function">docker</span> run <span class="token operator">&lt;</span>image name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意1：这个名字不是创建出来的容器的名字，而是镜像的名字。实际上容器的名字是随机分配的。</p><p>注意2：创建出来的容器都是不同的个体，都是一个新的容器，而不是覆盖老的容器。尤其是你哪怕指定同样的名字，也不能覆盖，而是报错，提示你想要重用就得删除原来的容器。</p><p>When you run this command, the following happens:</p><ol><li><p>The Docker client contacted the Docker daemon. If you do not have the ubuntu image locally, the Docker daemon pulls it from your configured registry, as though you had run <code>docker pull ubuntu</code> manually.</p></li><li><p>Docker creates a new container, as though you had run a <code>docker container create</code> command manually.</p></li><li><p>Docker allocates a read-write filesystem to the container, as its final layer. This allows a running container to create or modify files and directories in its local filesystem.</p></li><li><p>Docker creates a network interface to connect the container to the default network, since you did not specify any networking options. This includes assigning an IP address to the container. By default, containers can connect to external networks using the host machine’s network connection.</p></li></ol><h3 id="_1-1-2-交互和后台" tabindex="-1"><a class="header-anchor" href="#_1-1-2-交互和后台" aria-hidden="true">#</a> 1.1.2. 交互和后台</h3><blockquote><p>都可以start</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入bash, 但是bash里exit后容器状态是Exited</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu <span class="token function">bash</span>

<span class="token comment"># 创建完的状态是up, bash里exit后容器状态还是up</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-itd</span> ubuntu <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方式都能进入bash.</p><p>想直接进入bash, 就用前者.</p><p>想开一个容器挂着, 用后者.</p><blockquote><p>不可start</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 即死状态</span>
<span class="token comment"># $ docker run ubuntu</span>
<span class="token comment"># $ docker run -d ubuntu</span>
<span class="token comment"># $ docker run ubuntu ls</span>
<span class="token comment"># $ docker run -d ubuntu ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建完后都一样是 Exited, 而且你start不了, 一直是Exited状态. 所以我称之为即死状态.</p><p>前两种完全就是废物. 后面两种还有点作用, 用来执行一次性的命令. 区别就是前者, 直接打印到host控制台, 后者还得用<code>docker container logs xxx</code>来查看.</p><p>PS: 其实还是有能用的地方, 就是执行有前台任务的镜像, 比如 nginx.</p><h4 id="_1-1-2-1-it交互" tabindex="-1"><a class="header-anchor" href="#_1-1-2-1-it交互" aria-hidden="true">#</a> 1.1.2.1. it交互</h4><p>用于可以交互终端的镜像，对不能交互的镜像来说该参数被忽略：</p><p>两个一起的参数<code>-it</code>：</p><ul><li><p><code>-i</code>: 交互</p></li><li><p><code>-t</code>: 进入终端</p></li></ul><blockquote><p>不指定终端，就自动选择适合的终端</p></blockquote><p>ubuntu选择bash</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu
root@007c6081700d:/<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>python选择python解释器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> python:3.8-slim-buster
Python <span class="token number">3.8</span>.12 <span class="token punctuation">(</span>default, Feb <span class="token number">26</span> <span class="token number">2022</span>, 00:33:25<span class="token punctuation">)</span> 
<span class="token punctuation">[</span>GCC <span class="token number">8.3</span>.0<span class="token punctuation">]</span> on linux
Type <span class="token string">&quot;help&quot;</span>, <span class="token string">&quot;copyright&quot;</span>, <span class="token string">&quot;credits&quot;</span> or <span class="token string">&quot;license&quot;</span> <span class="token keyword">for</span> <span class="token function">more</span> information.
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>指定终端</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> python:3.8-slim-buster <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-1-2-2-启动时执行命令" tabindex="-1"><a class="header-anchor" href="#_1-1-2-2-启动时执行命令" aria-hidden="true">#</a> 1.1.2.2. 启动时执行命令</h4><p>上面的指定终端其实就是启动时执行命令.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run ubuntu <span class="token function">cat</span> /proc/version
Linux version <span class="token number">5.10</span>.16.3-microsoft-standard-WSL2 <span class="token punctuation">(</span>oe-user@oe-host<span class="token punctuation">)</span> <span class="token punctuation">(</span>x86_64-msft-linux-gcc <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span> <span class="token number">9.3</span>.0, GNU ld <span class="token punctuation">(</span>GNU Binutils<span class="token punctuation">)</span> <span class="token number">2.34</span>.0.20200220<span class="token punctuation">)</span> <span class="token comment">#1 SMP Fri Apr 2 22:23:49 UTC 2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you have many commant to run, you can write a script in your local device, <code>docker run ubuntu myscript.sh</code></p><h4 id="_1-1-2-3-后台" tabindex="-1"><a class="header-anchor" href="#_1-1-2-3-后台" aria-hidden="true">#</a> 1.1.2.3. 后台</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-d/--detach</code> - run the container in detached mode (in the background)</p><p>如果不使用 <code>-d</code> 参数运行容器，容器会把输出的结果 (STDOUT) 打印到宿主机上面。</p><p>如果使用了 <code>-d</code> 参数运行容器。此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 <code>docker logs</code> 查看)。</p><h5 id="_1-1-2-3-1-log" tabindex="-1"><a class="header-anchor" href="#_1-1-2-3-1-log" aria-hidden="true">#</a> 1.1.2.3.1. log</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># or docker logs &lt;container name or id&gt;</span>
$ <span class="token function">docker</span> container logs my_ubuntu
hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>f</code> : 跟踪日志输出</p></li><li><p><code>t</code> : 显示时间戳</p></li></ul><h5 id="_1-1-2-3-2-进入后台" tabindex="-1"><a class="header-anchor" href="#_1-1-2-3-2-进入后台" aria-hidden="true">#</a> 1.1.2.3.2. 进入后台</h5><p>当容器正在后台运行时，来进入处于后台的容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my_ubuntu /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-1-3-容器命名" tabindex="-1"><a class="header-anchor" href="#_1-1-3-容器命名" aria-hidden="true">#</a> 1.1.3. 容器命名</h3><blockquote><p>默认是随机命名</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run ubuntu

$ <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-l</span> 
<span class="token punctuation">..</span>. NAMES
<span class="token punctuation">..</span>. hopeful_faraday
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>指定名字 name</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># docker run --name &lt;container name&gt; &lt;image name&gt;</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">--name</span> my_ubuntu ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-4-端口映射" tabindex="-1"><a class="header-anchor" href="#_1-1-4-端口映射" aria-hidden="true">#</a> 1.1.4. 端口映射</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:80 docker/getting-started
8094c7cb8aa7e2ec55c78fbe6c80ccf7f7a5c440a4bd979584cf27fc074f2551

<span class="token comment"># 查看端口方式1</span>
$ <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-l</span>
CONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS          PORTS                  NAMES
8094c7cb8aa7   docker/getting-started   <span class="token string">&quot;/docker-entrypoint.…&quot;</span>   <span class="token number">25</span> seconds ago   Up <span class="token number">24</span> seconds   <span class="token number">0.0</span>.0.0:8000-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp   hopeful_faraday
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-p/--publish [host]:[container]</code>: map port 8000 of the host to port 80 in the container。<code>0.0.0.0:8000-&gt;80/tcp</code>表示container使用tcp将80映射到主机的<code>localhost:8000</code>端口。现在在主机浏览器输入<code>http://localhost:8000</code>就能进入前端。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> docker/getting-started        
01691b85739ed2f838cf499573c99ae13dd025aaf0c1915827b8581943296be5

<span class="token comment"># 查看端口方式2</span>
$ <span class="token function">docker</span> port happy_galois
<span class="token number">80</span>/tcp -<span class="token operator">&gt;</span> <span class="token number">0.0</span>.0.0:49153
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-P</code>: 随机映射。现在在主机浏览器输入<code>http://localhost:49153</code>就能进入前端。</p><h3 id="_1-1-5-挂载volume" tabindex="-1"><a class="header-anchor" href="#_1-1-5-挂载volume" aria-hidden="true">#</a> 1.1.5. 挂载Volume</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> volume create myvolume     <span class="token comment"># 创建数据卷\`myvolume\`</span>
$ <span class="token function">docker</span> volume <span class="token function">ls</span>                  <span class="token comment"># 列出</span>
$ <span class="token function">docker</span> volume <span class="token function">rm</span> myvolume         <span class="token comment"># 删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-v</span> myvolume:/var/lib/mysql mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-v/--volume</code>: <code>&lt;local_path&gt;:&lt;container_path&gt;</code>.</p><h3 id="_1-1-6-gpu" tabindex="-1"><a class="header-anchor" href="#_1-1-6-gpu" aria-hidden="true">#</a> 1.1.6. GPU</h3><p>!!!info re-requisite - Nvidia GPU hardware in your PC host. - installed Nvidia Driver in your PC host(can run <code>nvidia-smi</code>) - don&#39;t need to install CUDA in your PC host(we can install it&#39;s any version in docker container)</p>`,63),p={href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html",target:"_blank",rel:"noopener noreferrer"},u=a(`<p><code>nvidia-docker</code>和<code>nvidia-docker2</code>不是同一个东西，<code>nvidia-docker</code>是老掉牙的东西。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>└─ libnvidia-container1 (version)
├─ libnvidia-container-tools (version)
│    └─ libnvidia-container1 (&gt;= version)
├─ nvidia-container-toolkit (version)
│    └─ libnvidia-container-tools (&gt;= version)
└─ nvidia-container-runtime
│    └─ nvidia-container-toolkit (&gt;= version, &lt;&lt; 2.0.0)
└─ nvidia-docker2
     ├─ docker-ce || docker-ee || docker.io
     └─ nvidia-container-toolkit (&gt;= version)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>nvidia-docker2</code>包含了<code>nvidia-container-toolkit</code>，还支持Kubernetes。所以直接安装<code>nvidia-docker2</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># distribution=ubuntu22.04</span>
<span class="token assign-left variable">distribution</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">.</span> /etc/os-release<span class="token punctuation">;</span><span class="token builtin class-name">echo</span> $ID$VERSION_ID<span class="token variable">)</span></span>
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://nvidia.github.io/libnvidia-container/gpgkey <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
<span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-L</span> https://nvidia.github.io/libnvidia-container/<span class="token variable">$distribution</span>/libnvidia-container.list <span class="token operator">|</span> <span class="token punctuation">\\</span>
            <span class="token function">sed</span> <span class="token string">&#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#39;</span> <span class="token operator">|</span> <span class="token punctuation">\\</span>
            <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list

<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> nvidia-docker2
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s run a test!</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ sudo docker run --rm --gpus all nvidia/cuda:11.0.3-base-ubuntu20.04 nvidia-smi
Thu Nov 24 09:14:50 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 515.65.01    Driver Version: 515.65.01    CUDA Version: 11.7     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0 Off |                  N/A |
|  0%   35C    P8     5W / 250W |      8MiB / 11264MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  NVIDIA GeForce ...  Off  | 00000000:03:00.0 Off |                  N/A |
|  0%   34C    P8     5W / 250W |      8MiB / 11264MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|    0   N/A  N/A    261440      G   /usr/lib/xorg/Xorg                  4MiB |
|    1   N/A  N/A    261440      G   /usr/lib/xorg/Xorg                  4MiB |
+-----------------------------------------------------------------------------+

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>use flag <code>--gpus ARG</code> in <code>docker run</code>. (since docker 19.03 which adds support for the <code>--gpu</code> option, and don&#39;t need <code>--runtime=nvidia</code>):</p><ul><li><code>--gpus all</code>:Exposes all GPUs.</li><li><code>--gpus &#39;&quot;device=0,2&quot;&#39;</code>:Exposes the first and third GPUs.</li><li><code>--gpus 2</code>: Exposes 2 GPUs.</li><li><code>--gpus device=GPU-3a23c669-1f69-c64e-cf85-44e9b07e7a2a</code>: Exposes that specific GPU.</li></ul><h2 id="_1-2-list" tabindex="-1"><a class="header-anchor" href="#_1-2-list" aria-hidden="true">#</a> 1.2. List</h2><blockquote><p>running</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># or \`docker ps\`</span>
$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID   IMAGE                    COMMAND   CREATED       STATUS         PORTS     NAMES
53d34d961f35   python:3.8-slim-buster   <span class="token string">&quot;bash&quot;</span>    <span class="token number">2</span> hours ago   Up <span class="token number">3</span> seconds             angry_euler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>all, include exited</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># or \`docker ps -a\`</span>
<span class="token comment">#   -a, --all. Show all containers (default shows just running)</span>
$ <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span>
CONTAINER ID   IMAGE                    COMMAND                  CREATED        STATUS                      PORTS     NAMES
2a6c4ac291c4   python:3.8-slim-buster   <span class="token string">&quot;bash&quot;</span>                   <span class="token number">2</span> hours ago    Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">2</span> hours ago                naughty_pascal
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>last</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># or \`docker ps -l\`</span>
<span class="token comment"># -l, --latest. Show the latest created container (includes all states)</span>
$ <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-l</span>
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS                     PORTS     NAMES
5e62446db54c   test33    <span class="token string">&quot;/bin/sh -c &#39;python3…&quot;</span>   <span class="token number">5</span> minutes ago   Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">5</span> minutes ago             busy_bouman
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-start-stop-restart" tabindex="-1"><a class="header-anchor" href="#_1-3-start-stop-restart" aria-hidden="true">#</a> 1.3. Start|Stop|Restart</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># docker start|stop|restart &lt;container name&gt;</span>
$ <span class="token function">docker</span> container start<span class="token operator">|</span>stop<span class="token operator">|</span>restart <span class="token operator">&lt;</span>container name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice: When you restart a container, it starts <strong>with the same flags or commands</strong> that it was originally started with. 这很方便。</p><h2 id="_1-4-operate-a-running-container" tabindex="-1"><a class="header-anchor" href="#_1-4-operate-a-running-container" aria-hidden="true">#</a> 1.4. Operate a running container</h2><p>要在启动后才能执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># or docker exec &lt;container name or id&gt;</span>
$ <span class="token function">docker</span> container <span class="token builtin class-name">exec</span> <span class="token operator">&lt;</span>container name or id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>比如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container <span class="token builtin class-name">exec</span> my_ubuntu <span class="token function">cat</span> /proc/version
Linux version <span class="token number">5.10</span>.16.3-microsoft-standard-WSL2 <span class="token punctuation">(</span>oe-user@oe-host<span class="token punctuation">)</span> <span class="token punctuation">(</span>x86_64-msft-linux-gcc <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span> <span class="token number">9.3</span>.0, GNU ld <span class="token punctuation">(</span>GNU Binutils<span class="token punctuation">)</span> <span class="token number">2.34</span>.0.20200220<span class="token punctuation">)</span> <span class="token comment">#1 SMP Fri Apr 2 22:23:49 UTC 2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 让后台的调出终端</span>
<span class="token comment"># 而且这里必须指定一个COMMAND，不会自适应调出终端，只能手动指定bash。</span>
$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my_ubuntu <span class="token function">bash</span>
root@011e5ebaf23e:/<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-5-remove" tabindex="-1"><a class="header-anchor" href="#_1-5-remove" aria-hidden="true">#</a> 1.5. Remove</h2><h3 id="_1-5-1-automaically-remove" tabindex="-1"><a class="header-anchor" href="#_1-5-1-automaically-remove" aria-hidden="true">#</a> 1.5.1. Automaically remove</h3><p><code>--rm</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-5-2-manually-remove-exited" tabindex="-1"><a class="header-anchor" href="#_1-5-2-manually-remove-exited" aria-hidden="true">#</a> 1.5.2. Manually remove exited</h3><p>正在运行的容器要停止后才能删除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># or docker rm [&lt;container name or id&gt;]</span>
<span class="token comment"># 一次能删除多个</span>
$ <span class="token function">docker</span> container <span class="token function">rm</span> my_ubuntu agitated_moser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载的volume不会被删.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 一次性</span>
$ <span class="token function">docker</span> container stop <span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-aq</span><span class="token variable">\`</span></span>
$ <span class="token function">docker</span> container <span class="token function">rm</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-aq</span><span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-3-remove-all-exited" tabindex="-1"><a class="header-anchor" href="#_1-5-3-remove-all-exited" aria-hidden="true">#</a> 1.5.3. Remove all exited</h3><p>如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker container prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,36);function v(m,b){const e=c("ExternalLinkIcon");return i(),t("div",null,[d,n("p",null,[n("a",p,[l("https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html"),o(e)])]),u])}const k=s(r,[["render",v],["__file","container.html.vue"]]);export{k as default};
